!function(window){"use strict";var _defaults={protocol:"https",domain:"mite.yo.lk",async:!0,timeout:60,error:function(xhr,msg){alert("Error: mite.gyver could not connect with your mite.account!")}},_nada=function(){},_parseJson=function(string){return/^\s*$/.test(string)?{}:JSON.parse(string)},_parseOptions=function(options){return"function"==typeof options&&(options={success:options}),options||{}},_extend=function(obj){for(var i=1,len=arguments.length;i<len;i++)for(var prop in arguments[i])obj[prop]=arguments[i][prop];return obj};window.Mite=function(options){if(!options||!options.account||!options.api_key)throw"account & api_key need to be set";var config=_extend({},_defaults,options),_loading={},_cache={},_buildUrl=function(path){return config.protocol+"://corsapi."+config.domain+"/"+path+".json"},_request=function(method,path,options){var timeout_handler,xhr=new XMLHttpRequest,data=options.data||null,async="boolean"==typeof options.async?options.async:config.async,timeout=options.timeout||config.timeout,handle_complete=function(options){var success=options.success||_nada,error=options.error||config.error,complete=options.complete||_nada,response={success:null,error:null,complete:null};return/2\d\d/.test(xhr.status)?xhr.responseText?(response.success=[_parseJson(xhr.responseText)],success(response.success[0])):(response.error=[xhr,"error"],error(xhr,"error")):(response.error=[xhr,xhr.responseText||"error"],error(xhr,xhr.responseText||"error")),response.complete=xhr,complete(xhr),response};if(xhr.onreadystatechange=function(){if(4==xhr.readyState){if("GET"==method){for(var i=0;i<_loading[path].length;i++)_cache[path]=handle_complete(_loading[path][i]);delete _loading[path]}else handle_complete(options);clearTimeout(timeout_handler)}},options.error&&(timeout_handler=setTimeout(function(){error(xhr,"timeout")},1e3*timeout)),xhr.open(method,path,async),data instanceof Object&&(data=JSON.stringify(data),xhr.setRequestHeader("Content-Type","application/json")),xhr.setRequestHeader("X-Requested-With","XMLHttpRequest"),xhr.setRequestHeader("X-MiteApiKey",config.api_key),xhr.setRequestHeader("X-MiteAccount",config.account),xhr.send(data),!config.async)return _parseJson(xhr.responseText)},_put=function(path,params,options){var parsed_options=_parseOptions(options);return parsed_options.data=params,_request("PUT",_buildUrl(path),parsed_options)},_destroy=function(path,options){return _request("DELETE",_buildUrl(path),_parseOptions(options))},_interface=function(cached_get_requests){var _get=function(path,params,options){var parsed_options,separator=/\?/.test(path)?"&":"?";if(void 0===options?parsed_options=_parseOptions(params):(parsed_options=_parseOptions(options)).data=params,path=_buildUrl(path),parsed_options.data&&(path+=separator+function(params){if(!params||"String"==typeof params)return params||"";var queries=[];for(var key in params)queries.push("_queryString"==key?params[key]:[encodeURIComponent(key),encodeURIComponent(params[key])].join("="));return queries.join("&")}(parsed_options.data),delete parsed_options.data),_loading[path])_loading[path].push(parsed_options);else{if(!cached_get_requests||!_cache[path])return _loading[path]=[parsed_options],_request("GET",path,parsed_options);parsed_options.success&&_cache[path].success&&parsed_options.success.apply(null,_cache[path].success),parsed_options.error&&_cache[path].error&&parsed_options.error.apply(null,_cache[path].error),parsed_options.complete&&_cache[path].complete&&parsed_options.complete.apply(null,_cache[path].complete)}},Base={_name:function(){return this._url.replace(/s$/,"").replace(/ie$/,"y")},_wrapParams:function(params){var p={};return p[this._name()]=params,p},all:function(params,options){return _get(this._url,params,options)},find:function(id,options){return _get(this._url+"/"+id,options)},create:function(params,options){return function(path,params,options){var parsed_options=_parseOptions(options);return parsed_options.data=params,_request("POST",_buildUrl(path),parsed_options)}(this._url,this._wrapParams(params),options)},update:function(id,params,options){return _put(this._url+"/"+id,this._wrapParams(params),options)},destroy:function(id,options){return _destroy(this._url+"/"+id,options)}},ActiveArchivedBase=_extend({all:void 0,active:Base.all,archived:function(params,options){return _get(this._url+"/archived",params,options)}},Base),OnlyReadable={create:void 0,update:void 0,destroy:void 0};return{account:function(options){return _get("account",options)},myself:function(options){return _get("myself",options)},TimeEntry:_extend({_url:"time_entries"},Base),Tracker:{find:function(options){return _get("tracker",options)},start:function(id,options){return _put("tracker/"+id,{},options)},stop:function(id,options){return _destroy("tracker/"+id,options)}},Bookmark:_extend({_url:"time_entries/bookmarks",time_entries_for:function(id,options){return _get(this._url+"/"+id+"/follow",options)}},Base,OnlyReadable),Customer:_extend({_url:"customers",projects_for:function(ids,options){return _get("projects?customer_id="+ids,options)},time_entries_for:function(ids,options){return _get("time_entries?customer_id="+ids,options)}},ActiveArchivedBase),Project:_extend({_url:"projects",time_entries_for:function(ids,options){return _get("time_entries?project_id="+ids,options)}},ActiveArchivedBase),Service:_extend({_url:"services",time_entries_for:function(ids,options){return _get("time_entries?service_id="+ids,options)}},ActiveArchivedBase),User:_extend({_url:"users",time_entries_for:function(ids,options){return _get("time_entries?user_id="+ids,options)}},ActiveArchivedBase,OnlyReadable),config:config,clearCache:function(kind){this._url&&(kind?_cache[kind]=void 0:_cache={})}}};return _extend(_interface(),{cache:_interface(!0)})}}(window);